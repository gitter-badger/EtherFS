#!/usr/bin/env python
from __future__ import with_statement

import subprocess
import re
import os
import sys
import json
import time
import errno
import glob
from errno import ENOENT
from stat import S_IFDIR, S_IFLNK, S_IFREG
from web3 import Web3, IPCProvider
from web3.providers.ipc import get_default_ipc_path
from fuse import FUSE, FuseOSError, Operations
import getpass


class Geth(object):

    account = None

    def __init__(self, testnet=True):
        self.testnet = testnet
        self.web3 = Web3(IPCProvider(testnet=testnet))
        self.wait()
        self.accounts = self.web3.eth.accounts

    def wait(self):
        while True:
            if os.path.exists(get_default_ipc_path(testnet=self.testnet)):
                break
            time.sleep(1)

    def deploy(self, abi, bin, runtime, value=0, args=None):

        contract = self.web3.eth.contract(abi=json.loads(abi), code=bin, code_runtime=runtime)
        tx_hash = contract.deploy(transaction={
                'from': self.account,
                'value': value,
            },
            args=args,
        )

        print tx_hash

    def unlock(self, account, passphrase):
        self.account = account
        self.web3.personal.unlockAccount(account, passphrase)


class Passthrough(Operations):

    CONTRACTS = {}

    ATTRS = ['abi', 'asm', 'ast', 'bin', 'bin-runtime', 'clone-bin', 'devdoc',
             'interface', 'opcodes', 'srcmap', 'srcmap-runtime', 'userdoc']

    def __init__(self, root):
        self.fd = 0
        self.root = root
        self.geth = Geth()
        for source_file in glob.glob(os.path.join(root, "*.sol")):
            output = subprocess.check_output([
                'solc', '--add-std', '--optimize',
                '--combined-json', ','.join(self.ATTRS),
                source_file
            ])

            compiled_data = json.loads(output)

            for contract_name, contract_data in compiled_data['contracts'].items():
                # TODO check for doubles
                self.CONTRACTS[contract_name] = contract_data

        print self.CONTRACTS.keys()

    # Filesystem methods
    # ==================

    def access(self, path, mode):
        print 'access', path, mode

    def chmod(self, path, mode):
        print 'chmod', path

    def chown(self, path, uid, gid):
        print 'chown', path

    def getattr(self, path, fh=None):
        print 'getattr', path
        now = time.time()
        if path == '/' or path[1:] in self.CONTRACTS.keys() or path == '/.personal':
            return dict(
                st_mode=(S_IFDIR | 0o444), st_ctime=now,
                st_mtime=now, st_atime=now, st_nlink=2)

        pattern = r"/\.personal/accounts/new"

        if re.match(pattern, path):
            return dict(st_mode=(S_IFREG | 0o444), st_nlink=1,
                        st_size=1000, st_ctime=now, st_mtime=now,
                        st_atime=now)

        pattern = r"/\.personal/accounts/0x\w{40}/unlock"

        if re.match(pattern, path):
            return dict(st_mode=(S_IFREG | 0o666), st_nlink=1,
                        st_size=1000, st_ctime=now, st_mtime=now,
                        st_atime=now)

        pattern = r"/\.personal/accounts/0x\w{40}/balance"

        if re.match(pattern, path):
            return dict(st_mode=(S_IFREG | 0o444), st_nlink=1,
                        st_size=1000, st_ctime=now, st_mtime=now,
                        st_atime=now)


        pattern = r"/(" + "|".join(self.CONTRACTS.keys()) + ")/(" + "|".join(self.ATTRS) + ")"

        if re.match(pattern, path):
            contract, attr = path.split(os.path.sep)[1:]
            return dict(st_mode=(S_IFREG | 0o444), st_nlink=1,
                        st_size=len(self.read(path)), st_ctime=now, st_mtime=now,
                        st_atime=now)

        if path.endswith('deploy'):
            return dict(st_mode=(S_IFREG | 0o544), st_nlink=1,
                        st_size=1000, st_ctime=now, st_mtime=now,
                        st_atime=now)

        return dict(
            st_mode=(S_IFDIR | 0o444), st_ctime=now,
            st_mtime=now, st_atime=now, st_nlink=2)
        # return {
        #     'st_atime': 0,
        #     'st_ctime': 0,
        #     'st_gid': 1000,
        #     'st_mode': 644,
        #     'st_mtime': 0,
        #     'st_nlink': 0,
        #     'st_size': 0,
        #     'st_uid': 1000
        # }

    def readdir(self, path, fh):
        print path, fh
        resp = []

        if path == '/':
            resp = ['.', '..', '.personal'] + self.CONTRACTS.keys()
        if path == '/.personal':
            resp = ['.', '..', 'accounts']
        if path == '/.personal/accounts':
            resp = ['.', '..', 'new'] + self.geth.accounts
        if re.match(r"/\.personal/accounts/0x\w{40}", path):
            resp = ['.', '..', 'unlock', 'balance']
        if path[1:] in self.CONTRACTS:
            resp = ['.', '..', 'deploy'] + self.CONTRACTS[path[1:]].keys()

        for r in resp:
            yield r

    def readlink(self, path):
        print 'readlink', path

    def mknod(self, path, mode, dev):
        print 'mknod', path

    def rmdir(self, path):
        print 'rmdir', path

    def mkdir(self, path, mode):
        print 'mkdir', path

    def statfs(self, path):
        print 'statfs', path
        # stv = os.statvfs(full_path)
        # return dict((key, getattr(stv, key)) for key in ('f_bavail', 'f_bfree',
        #     'f_blocks', 'f_bsize', 'f_favail', 'f_ffree', 'f_files', 'f_flag',
        #     'f_frsize', 'f_namemax'))

    def unlink(self, path):
        print 'unlink', path

    def symlink(self, name, target):
        print 'symlink', name, target

    def rename(self, old, new):
        print 'rename', old, new

    def link(self, target, name):
        print 'link', target, name

    def utimens(self, path, times=None):
        print 'utimens', path


    # File methods
    # ============

    def open(self, path, flags):
        self.fd += 1
        return self.fd

    def read(self, path, length=None, offset=None, fh=None):
        print 'read', path, length, offset, fh

        if re.match(r"/\.personal/accounts/0x\w{40}/balance", path):
            return "Not implemented yet"

        match = re.match(r"/\.personal/accounts/(?P<account>0x\w{40})/unlock", path)
        if match:
            if match.group('account') == self.geth.account:
                return "Account unlocked"
            return """Please unlock account by writing to this file.
echo 'passphrase' > etherfs/.personal/accounts/0x12345689/unlock"""

        if re.match(r"/\.personal/accounts/new", path):
            return "Not implemented yet"

        if re.match(r"/(" + "|".join(self.CONTRACTS.keys()) + ")/deploy", path):
            contract, attr = path.split(os.path.sep)[1:3]
            try:
                tx = self.geth.deploy(self.account, self.CONTRACTS[contract]['abi'], self.CONTRACTS[contract]['bin'], self.CONTRACTS[contract]['bin-runtime'])
            except Exception as e:
                return str(e)
            keys = list(self.CONTRACTS[contract]['instances'].keys())
            if keys:
                current_instance = max() + 1
            else:
                current_instance = 1
            self.CONTRACTS[contract]['instances'][current_instance] = {
                "address": "TODO: address"
            }
            return "Transation: ", tx
        contract, attr = path.split(os.path.sep)[1:]
        if attr == 'asm':
            return json.dumps(self.CONTRACTS[contract][attr])
        return str(self.CONTRACTS[contract][attr])

    def write(self, path, buf, offset, fh):
        print 'write', path, buf, offset, fh

        match = re.match(r"/\.personal/accounts/(?P<account>0x\w{40})/unlock", path)
        if match:
            account = match.group('account')
            try:
                self.geth.unlock(account, buf)
            except Exception as e:
                pass
                # TODO: handle wrong passphrase


def main(root, mountpoint):
    geth = subprocess.Popen(['/usr/bin/geth', '--testnet', '--fast', '--cache', '512'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    print os.listdir(root)
    print os.listdir(mountpoint)


    FUSE(Passthrough(root), mountpoint, nothreads=True, foreground=True, allow_other=True)


if __name__ == '__main__':
    main('/workspace', '/etherfs')
